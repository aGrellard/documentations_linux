install Supporting Software
	The software-properties-common package gives you better control over your package manager by letting you add PPA (Personal Package Archive) repositories. Install the supporting software with the command:
		sudo apt install software-properties-common


add Deadsnakes PPA
	Deadsnakes is a PPA with newer releases than the default Ubuntu repositories. Add the PPA by entering the following:
		sudo add-apt-repository ppa:deadsnakes/ppa	
			sudo apt update
sudo apt install python3.8
	python --version
	


Option 2: Install Python 3.7 From Source Code (Latest Version)
	Use this process to download and compile the source code from the developer. It’s a bit more complicated, but the trade-off is accessing a newer release of Python.

Step 1: Update Local Repositories
	To update local repositories, use the command:
		sudo apt update

Step 2: Install Supporting Software
	Compiling a package from source code requires additional software.
	
	Enter the following to install the required packages for Python:
		sudo apt install build-essential zlib1g-dev libncurses5-dev libgdbm-dev libnss3-dev libssl-dev libreadline-dev libffi-dev wget
			
Step 3: Download the Latest Version of Python Source Code
	To download the newest release of Python Source Code, navigate to the /tmp directory and use the wget command:
		cd /tmp
		wget https://www.python.org/ftp/python/3.7.5/Python-3.7.5.tgz
		note: The source code is different from the software found on the main download page. At the time this article was written, Python 3.7.5 was the latest version available.

Step 4: Extract Compressed Files
	Next, you need to extract the tgz file you downloaded, with the command:
		tar -xf Python-3.8.3.tgz

Step 5: Test System and Optimize Python
	Before you install the software, make sure you test the system and optimize Python.
	The ./configure command evaluates and prepares Python to install on your system. Using the --optimization option speeds code execution by 10-20%.
	Enter the following:
		cd python-3.8.3
		sudo apt update
		sudo apt-get install build-essential
		sudo ./configure --enable-optimizations
		This step can take up to 30 minutes to complete.
		
Step 6: Install a Second Instance of Python (recommended)
	To create a second installation of Python 3.835, in addition to your current Python installation, enter the following:
	
	
	It is recommended that you use the altinstall method. Your Ubuntu system may have software packages dependent on Python 2.x.
	
	(Option) Overwrite Default Python Installation 
	To install Python 3.8.3 over the top of your existing Python, enter the following:
		sudo make install

Allow the process to complete.


Using Different Versions of Python

If you used the altinstall method, you have two different versions of Python on your system at the same time. Each installation uses a different command.

Use the python command to run commands for any older Python 2.x version on your system. For example:

python --version

To run a command using the newer version, use python3. For example:

python3 --version

It is possible to have multiple major (3.x or 2.x) versions of Python on your system. If you have Python 3.7.x and Python 3.8.x both installed, use the second digit to specify which version you want to use:

python3.7 --version

python3.8 --version





PIP
    sudo python3.7 -m pip install pip















Before You Begin

Python comes in two flavors; Python 2 and Python 3. Starting from Ubuntu 20.04, Python 3 is included in the base system installation, and Python 2 is available for installation from the Universe repository. Users are encouraged to switch to Python 3.

When installing a Python module globally, it is highly recommended to install the module’s deb package with the apt tool as they are tested to work properly on Ubuntu systems. Python 3 packages are prefixed with python3- and Python 2 packages are prefixed with python2-.

Use pip to install a module globally only if there is no deb package for that module.

Prefer using pip within a virtual environment only. Python Virtual Environments allows you to install Python modules in an isolated location for a specific project, rather than being installed globally. This way, you do not have to worry about affecting other Python projects.
Installing pip for Python 3

To install pip for Python 3 on Ubuntu 20.04 run the following commands as root or sudo user in your terminal:

    sudo apt update
    sudo apt install python3-pip

The command above will also install all the dependencies required for building Python modules.

When the installation is complete, verify the installation by checking the pip version:

    pip3 --version

The version number may vary, but it will look something like this:

pip 20.0.2 from /usr/lib/python3/dist-packages/pip (python 3.8)

Installing pip for Python 2

Pip for Python 2 is not included in the Ubuntu 20.04 repositories. We’ll be installing pip for Python 2 using the get-pip.py script.

Start by enabling the universe repository:

    sudo add-apt-repository universe

Update the packages index and install Python 2:

    sudo apt update 
    sudo apt install python2

Use curl to download the get-pip.py script:

    curl https://bootstrap.pypa.io/pip/2.7/get-pip.py --output get-pip.py

Once the repository is enabled, run the script as sudo user with python2 to install pip for Python 2:

    sudo python2 get-pip.py

Pip will be installed globally. If you want to install it only for your user, run the command without sudo. The script will also install setuptools and wheel, which allow you to install source distributions.

Verify the installation by printing the pip version number:

    pip2 --version

The output will look something like this:

pip 20.0.2 from /usr/local/lib/python2.7/dist-packages/pip (python 2.7)

How to Use Pip

In this section, we show you a few useful basic pip commands. With pip, you can install packages from PyPI, version control, local projects, and from distribution files. Generally, you will install packages from PyPI.

To view the list of all pip commands and options, type:

    pip3 --help

How to use pip

You can get more information about a specific command using pip <command> --help . For example, to get more information about the install command, type:

    pip3 install --help

Installing Packages with Pip

Let’s say you want to install a package called scrapy which is used for scraping and extracting data from websites.

To install the latest version of the package you would run the following command:

pip3 install scrapy

To install a specific version of the package append == and the version number after the package name:

    pip3 install scrapy==1.5

Replace pip3 with pip2 if using Python 2.
Installing Packages with Pip using the Requirements Files

requirement.txt is a text file that contains a list of pip packages with their versions that are required to run a specific Python project.

Use the following command to install a list of requirements specified in a file:

    pip3 install -r requirements.txt

Listing Installed Packages

To list all the installed pip packages use the command below:

    pip3 list

Upgrade a Package With Pip

To upgrade an already installed package to the latest version, enter:

    pip3 install --upgrade package_name

Uninstalling Packages With Pip

To uninstall a package run:

    pip3 uninstall package_nam



















